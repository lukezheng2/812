# settings ----
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(purrr)
library(magrittr)
library(ggplot2)
library(car)
library(agricolae)
library(DescTools)
library(broom)
library(xtable)

#############ARRUMANDO OS DADOS###############################
# definindo variáveis para importação ----
facLinha = col_factor(c(18, 38, 46, 22, 30, 6, 14, 34, 42, 26, 2, 10))
facTransecto = col_factor(1:3)
facDecomp    = col_factor(1:5)
facEstrutura = col_factor(c("arv", "arv(galho)"))
facPodridao  = col_factor(c("mista", "branca", "marrom"))
facAno       = col_factor(c(2016, 2017, 2018))

nomes = c("parcela", "linha",    "subTransecto", "perimetro",     "direcao",     "decomp",
          "X2", "X5", "estrutura",    "podridao",      "comprimento", "interceptacao", 
          "ano",          "perimetroBase", "perimetroExtremo")

# importando dados ---- 
#"--ccc-nnc-iiccnn-c-ccc--nn"

dados = read_delim("Planilha_ESTOQUE_2016_a_2018_Diversidade.csv", delim = ";",
                   col_types = cols_only(Parcela          = "c",          Linha                = facLinha,
                                         'Sub transecto'  = facTransecto, Perimetr             = "n",
                                         direcao          = "n",          'grau decomp'        = facDecomp, 
                                         '[2-5 cm]'       = "i",          '[5-10 cm]'          = "i",
                                         'Tipo de planta' = facEstrutura, podridao             = facPodridao, 
                                         comprimento      = "n",          'pto inter ceptação' = "n", 
                                         ano              = facAno,       'perimetro na base'  = "n",
                                         'perimetro no extremo distal' = "n"))
# Aqui aparecem uns warnings, mas é só para avisar das variáveis que eu tirei.

names(dados) = nomes

levels(dados$estrutura) = c("tronco", "galho")

rm(nomes, facDecomp, facEstrutura, facLinha, facPodridao, facTransecto, facAno)

dados %<>% separate(parcela, c("tratamento", "replicacao"), sep = 1)
dados$tratamento = factor(dados$tratamento)
dados$replicacao = factor(dados$replicacao)

# Arrumando banco ----
# os dados de 2018 não tem contagem
#dados$X2[!is.na(dados$perimetro)] = NA
#dados$X5[!is.na(dados$perimetro)] = NA

dados$X2[dados$X2 == 0] = NA 
dados$X5[dados$X5 == 0] = NA

dados = dados %>% 
  mutate(diametro = perimetro/pi) %>% 
  select (-perimetro) %>% 
  filter(!is.na(diametro) | !is.na(X2) | !is.na(X5))

dadosAnt = dados %>% filter(ano != 2018)
dadosPos = dados %>% filter(ano == 2018)

# Calcular quantas observações devem ter ao final ----
# para ant
nAnt = (sum(dadosAnt$X2, na.rm = T) + sum(dadosAnt$X5, na.rm = T))*5 + 
  sum(!is.na(dadosAnt$diametro))
# para pos
nPos = (sum(dadosPos$X2, na.rm = T) + sum(dadosPos$X5, na.rm = T))*5 +
  sum(is.na(dadosPos$X2) & is.na(dadosPos$X5))

# alocar data.frames adecuados
aloca = function(dados, i, n, diam){
  do.call(rbind, rep(list(dados[i,]), n)) %>% mutate(diametro = diam)
}

ant = rbind(do.call(rbind, map(1:116, function(i){
  if(!is.na(dadosAnt$X2[i])){aloca(dadosAnt, i, dadosAnt[i,"X2"] * 5, 3.16)}})),
            do.call(rbind, map(1:116, function(i){if
              (!is.na(dadosAnt$X5[i])){aloca(dadosAnt, i, dadosAnt[i,"X5"] * 5, 7.07)}})),
            dadosAnt %>% filter(is.na(X2) & is.na(X5))) %>% select(-X2, -X5)

pos = rbind(do.call(rbind, map(1:150, function(i){if(!is.na(dadosPos$X2[i])){aloca(dadosPos, i, dadosPos[i,"X2"] * 5, dadosPos$diametro[i])}})),
            do.call(rbind, map(1:150, function(i){if(!is.na(dadosPos$X5[i])){aloca(dadosPos, i, dadosPos[i,"X5"] * 5, dadosPos$diametro[i])}})),
            dadosPos %>% filter(is.na(X2) & is.na(X5))) %>% select(-X2, -X5)

ant$catDiametro = ifelse(ant$diametro < 5,  "(2-5)",
                         ifelse(ant$diametro < 10, "(5-10)", "(+10)"))

pos$catDiametro = ifelse(pos$diametro < 5,  "(2-5)",
                         ifelse(pos$diametro < 10, "(5-10)", "(+10)"))

save(ant, pos, file = "dados.rda")


#### SEPARANDO OS BANCOS DE DADOS ###############################

load("dados.rda")

grausDeg = data.frame(decomp = factor(1:5), densidade = c(0.40, 0.30, 0.19, 0.13, 0.09))

volAnt = ant %>% filter(ano == 2017) %>% group_by(linha, tratamento, replicacao, ano, decomp) %>%
  summarise(vol = (pi^2) * sum(diametro ^2)/(8*45))

volPos = pos %>% group_by(linha, tratamento, replicacao, ano, decomp) %>% 
  summarise(vol = (pi^2) * sum(diametro ^2)/(8*45))

vol10  = rbind(ant, pos) %>% filter(diametro > 10) %>% 
  group_by(linha, tratamento, replicacao, ano, decomp) %>% 
  summarise(vol = (pi^2) * sum(diametro ^2)/(8*45))

massaAnt = inner_join(volAnt, grausDeg) %>% mutate(massa = vol * densidade)
massaPos = inner_join(volPos, grausDeg) %>% mutate(massa = vol * densidade)
massa10  = inner_join(vol10,  grausDeg) %>% mutate(massa = vol * densidade)

#modelo
fit = aov(log(massa) ~ tratamento , data = massa10) 
anova(fit)

#banda de confiança
qqPlot(residuals(fit))
#teste de normalidade
shapiro.test(resid(fit))
#teste de variancia
leveneTest(log(massa) ~ tratamento , data = massa10)

#comparação de medias
ScheffeTest(fit)
TukeyHSD(fit) %>% tidy() 


###### modelo para 2018 #######3
fit1 = aov(log(massa) ~ tratamento , data= massaPos)
anova(fit1)

#banda de confiança
qqPlot(residuals(fit1))

#grafico de residuos
plot(fit1$residuals)
#teste de normalidade
shapiro.test(resid(fit1))
#teste de variancia
leveneTest(log(massa) ~ tratamento , data = massaPos)

#comparação de medias
ScheffeTest(fit1)
TukeyHSD(fit1) %>% tidy() 
  
######## modelo 2017 #######################


fit2 = aov(log(massa) ~ tratamento, data=massaAnt)
anova(fit2)

#banda de confiança
qqPlot(residuals(fit2))

#grafico de residuos
plot(fit2$residuals)
#teste de normalidade
shapiro.test(resid(fit2))
#teste de variancia
leveneTest(log(massa) ~ tratamento , data = massaAnt)

#comparação de medias
ScheffeTest(fit2)
TukeyHSD(fit2) %>% tidy() 


#massa para cada tratamento

massaAnt %>% rbind(massaPos)  %>% 
  group_by(ano, tratamento) %>% 
  summarise(massa = sum(massa)) %>% 
  spread(tratamento,massa) %>% 
  xtable()


#Decomp
ant %>% rbind(pos) %>% 
  select(decomp,ano, tratamento) %>%
  group_by(ano,tratamento) %>% 
  table()

ant %>% rbind(pos) %>% 
  ggplot(aes(x = ano, group = decomp, fill = decomp)) +
  geom_bar(color="black", position = "dodge") +
  labs(x = "Ano" , y = "Frequência") +
  scale_fill_brewer(palette = "Dark2", "Grau de decomposição")

ant %>% rbind(pos) %>% 
  ggplot(aes(x = tratamento, group = decomp, fill = decomp)) +
  geom_bar(color="black", position = "dodge") +
  labs(x = "Tratamento" , y = "Frequência") +
  scale_fill_brewer(palette = "Dark2", "Grau de decomposição") +
  facet_grid(aes(ano))

#podridão

ant %>% rbind(pos) %>% filter(ano!="2016") %>% 
  ggplot(aes(x = tratamento, group = podridao, fill = podridao)) +
  geom_bar(color="black", position = "dodge") +
  labs(x = "Tratamento" , y = "Frequência") +
  scale_fill_brewer(palette = "Dark2", "Grau de decomposição") +
  theme_bw()#+
  #facet_grid(aes(ano))

ant %>% rbind(pos) %>% 
  group_by(ano,tratamento) %>% 
  summarise(n=n(), NAS = sum(is.na(podridao))/n, 
            mista = sum(podridao=="mista", na.rm = T)/n,
            branca = sum(podridao=="branca", na.rm = T)/n,
            marrom = sum(podridao=="marrom", na.rm = T)/n) %>% 
  ungroup() %>% 
  View




  
#GRAFICO HULK
log(massaPos$massa) %>% hist()
ggplot(massaPos, aes(x = log(massa), fill = factor(tratamento))) + geom_histogram(binwidth = .2)






